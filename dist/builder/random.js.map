{"version":3,"sources":["../../lib/builder/random.js"],"names":[],"mappings":"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","file":"random.js","sourcesContent":["/**\n * 随机生成古诗\n */\n\nimport {\n  getRandomItem\n}\nfrom '../util/random'\n\nimport render from '../util/render'\nimport templatesData from '../data/templates'\nimport wordsData from '../data/words'\n\n/**\n * 随机生成 TemplateData 数据源\n * @param  {Array}   array          原始的数据源数组\n * @param  {Int}     limit          需要几个随机的元素\n * @param  {String}  cTempData      当前已有的汉字组成的字符串，新生成的数组不会有重复的汉字\n * @return {Array}   生成的新随机数组\n */\nfunction buildTemplateArray(array, count, cTempData) {\n  const resultArray = []\n  while (resultArray.length !== count) {\n    // 随机生成汉字词组，如果随机结果和已有数据重复，则弃用本次生成结果\n    var r = getRandomItem(array)\n    var sameWords = Object.keys(cTempData)\n      .reduce((pv, cv) => {\n        return pv.concat(cTempData[cv].join('').split(''))\n      }, [])\n      .concat(resultArray.join('').split(''))\n      .filter((cWord) => {\n        var same = false\n        r.split('').forEach((w) => {\n          if (w == cWord) {\n            same = true\n          }\n        })\n        return same\n      })\n    if (sameWords.length === 0) {\n      resultArray.push(r)\n    }\n  }\n\n  return resultArray\n}\n\n\nfunction buildTemplate(template) {\n  const templateCount = template\n    .reduce((pv, cv) => {\n      const words = cv.split('/')\n      words.pop()\n      return pv.concat(words)\n    }, [])\n    .reduce((pv, cv) => {\n      const v = pv[cv] || 0\n      pv[cv] = v + 1\n      return pv\n    }, {})\n\n  const aDataWords = wordsData.A\n  const bDataWords = getRandomItem(wordsData.B)\n\n  const templateData = Object.keys(templateCount).reduce((pv, cv) => {\n    const type = cv.split('')[0]\n    const length = cv.split('')[1]\n    const pz = cv.split('')[2]\n    const count = templateCount[cv]\n    var words = []\n    switch (type) {\n      case 'A':\n        words = aDataWords[length][pz]\n        break\n      case 'B':\n        words = bDataWords[length][pz]\n        break\n      default:\n        break\n    }\n    const data = buildTemplateArray(words, count, pv)\n    pv[cv] = data\n    return pv\n  }, {})\n\n  return render(template, templateData)\n}\n\nexport default function build(temp) {\n  const t = temp || getRandomItem(templatesData)\n  return buildTemplate(t)\n}\n\n// console.log(build())\n"]}